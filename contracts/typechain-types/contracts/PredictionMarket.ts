/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace PredictionMarket {
  export type BetStruct = {
    marketId: BigNumberish;
    user: AddressLike;
    outcome: boolean;
    shares: BigNumberish;
    amount: BigNumberish;
    revealedAt: BigNumberish;
    claimed: boolean;
  };

  export type BetStructOutput = [
    marketId: bigint,
    user: string,
    outcome: boolean,
    shares: bigint,
    amount: bigint,
    revealedAt: bigint,
    claimed: boolean
  ] & {
    marketId: bigint;
    user: string;
    outcome: boolean;
    shares: bigint;
    amount: bigint;
    revealedAt: bigint;
    claimed: boolean;
  };

  export type CommitmentStruct = {
    commitHash: BytesLike;
    amount: BigNumberish;
    timestamp: BigNumberish;
    revealed: boolean;
  };

  export type CommitmentStructOutput = [
    commitHash: string,
    amount: bigint,
    timestamp: bigint,
    revealed: boolean
  ] & {
    commitHash: string;
    amount: bigint;
    timestamp: bigint;
    revealed: boolean;
  };

  export type MarketStruct = {
    id: BigNumberish;
    title: string;
    description: string;
    creator: AddressLike;
    createdAt: BigNumberish;
    expiresAt: BigNumberish;
    category: BigNumberish;
    totalPool: BigNumberish;
    yesPool: BigNumberish;
    noPool: BigNumberish;
    yesShares: BigNumberish;
    noShares: BigNumberish;
    participants: BigNumberish;
    status: BigNumberish;
    outcome: boolean;
    resolutionReasoning: string;
  };

  export type MarketStructOutput = [
    id: bigint,
    title: string,
    description: string,
    creator: string,
    createdAt: bigint,
    expiresAt: bigint,
    category: bigint,
    totalPool: bigint,
    yesPool: bigint,
    noPool: bigint,
    yesShares: bigint,
    noShares: bigint,
    participants: bigint,
    status: bigint,
    outcome: boolean,
    resolutionReasoning: string
  ] & {
    id: bigint;
    title: string;
    description: string;
    creator: string;
    createdAt: bigint;
    expiresAt: bigint;
    category: bigint;
    totalPool: bigint;
    yesPool: bigint;
    noPool: bigint;
    yesShares: bigint;
    noShares: bigint;
    participants: bigint;
    status: bigint;
    outcome: boolean;
    resolutionReasoning: string;
  };
}

export interface PredictionMarketInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "COMMIT_REVEAL_TIMEOUT"
      | "MAX_BET_AMOUNT"
      | "MIN_BET_AMOUNT"
      | "PLATFORM_FEE_PERCENT"
      | "PRICE_PRECISION"
      | "bets"
      | "calculatePayout"
      | "cancelMarket"
      | "claimRefund"
      | "claimWinnings"
      | "commitBet"
      | "commitments"
      | "createMarket"
      | "emergencyWithdraw"
      | "getBet"
      | "getCommitment"
      | "getMarket"
      | "getMarketCount"
      | "marketIdCounter"
      | "marketParticipants"
      | "markets"
      | "owner"
      | "pause"
      | "paused"
      | "pendingReveals"
      | "renounceOwnership"
      | "resolveMarket"
      | "resolverAddress"
      | "revealBet"
      | "setResolverAddress"
      | "setVaultAddress"
      | "transferOwnership"
      | "unpause"
      | "vaultAddress"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "BetCommitted"
      | "BetRevealed"
      | "MarketCancelled"
      | "MarketCreated"
      | "MarketResolved"
      | "OwnershipTransferred"
      | "Paused"
      | "Unpaused"
      | "WinningsClaimed"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "COMMIT_REVEAL_TIMEOUT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_BET_AMOUNT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_BET_AMOUNT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PLATFORM_FEE_PERCENT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PRICE_PRECISION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "bets",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "calculatePayout",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelMarket",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimRefund",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimWinnings",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "commitBet",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "commitments",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createMarket",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdraw",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBet",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getCommitment",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getMarket",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMarketCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "marketIdCounter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "marketParticipants",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "markets",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingReveals",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "resolveMarket",
    values: [BigNumberish, boolean, string]
  ): string;
  encodeFunctionData(
    functionFragment: "resolverAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "revealBet",
    values: [BigNumberish, boolean, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setResolverAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setVaultAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "vaultAddress",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "COMMIT_REVEAL_TIMEOUT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_BET_AMOUNT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_BET_AMOUNT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PLATFORM_FEE_PERCENT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PRICE_PRECISION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "bets", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "calculatePayout",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelMarket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimRefund",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimWinnings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "commitBet", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "commitments",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createMarket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getBet", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCommitment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getMarket", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getMarketCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "marketIdCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "marketParticipants",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "markets", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingReveals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resolveMarket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resolverAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revealBet", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setResolverAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setVaultAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "vaultAddress",
    data: BytesLike
  ): Result;
}

export namespace BetCommittedEvent {
  export type InputTuple = [
    marketId: BigNumberish,
    user: AddressLike,
    commitHash: BytesLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    marketId: bigint,
    user: string,
    commitHash: string,
    amount: bigint
  ];
  export interface OutputObject {
    marketId: bigint;
    user: string;
    commitHash: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BetRevealedEvent {
  export type InputTuple = [
    marketId: BigNumberish,
    user: AddressLike,
    outcome: boolean,
    amount: BigNumberish,
    shares: BigNumberish
  ];
  export type OutputTuple = [
    marketId: bigint,
    user: string,
    outcome: boolean,
    amount: bigint,
    shares: bigint
  ];
  export interface OutputObject {
    marketId: bigint;
    user: string;
    outcome: boolean;
    amount: bigint;
    shares: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MarketCancelledEvent {
  export type InputTuple = [marketId: BigNumberish];
  export type OutputTuple = [marketId: bigint];
  export interface OutputObject {
    marketId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MarketCreatedEvent {
  export type InputTuple = [
    marketId: BigNumberish,
    creator: AddressLike,
    title: string,
    expiresAt: BigNumberish,
    category: BigNumberish
  ];
  export type OutputTuple = [
    marketId: bigint,
    creator: string,
    title: string,
    expiresAt: bigint,
    category: bigint
  ];
  export interface OutputObject {
    marketId: bigint;
    creator: string;
    title: string;
    expiresAt: bigint;
    category: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MarketResolvedEvent {
  export type InputTuple = [
    marketId: BigNumberish,
    outcome: boolean,
    reasoning: string
  ];
  export type OutputTuple = [
    marketId: bigint,
    outcome: boolean,
    reasoning: string
  ];
  export interface OutputObject {
    marketId: bigint;
    outcome: boolean;
    reasoning: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WinningsClaimedEvent {
  export type InputTuple = [
    marketId: BigNumberish,
    user: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [marketId: bigint, user: string, amount: bigint];
  export interface OutputObject {
    marketId: bigint;
    user: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface PredictionMarket extends BaseContract {
  connect(runner?: ContractRunner | null): PredictionMarket;
  waitForDeployment(): Promise<this>;

  interface: PredictionMarketInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  COMMIT_REVEAL_TIMEOUT: TypedContractMethod<[], [bigint], "view">;

  MAX_BET_AMOUNT: TypedContractMethod<[], [bigint], "view">;

  MIN_BET_AMOUNT: TypedContractMethod<[], [bigint], "view">;

  PLATFORM_FEE_PERCENT: TypedContractMethod<[], [bigint], "view">;

  PRICE_PRECISION: TypedContractMethod<[], [bigint], "view">;

  bets: TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [
      [bigint, string, boolean, bigint, bigint, bigint, boolean] & {
        marketId: bigint;
        user: string;
        outcome: boolean;
        shares: bigint;
        amount: bigint;
        revealedAt: bigint;
        claimed: boolean;
      }
    ],
    "view"
  >;

  calculatePayout: TypedContractMethod<
    [marketId: BigNumberish, user: AddressLike],
    [bigint],
    "view"
  >;

  cancelMarket: TypedContractMethod<
    [marketId: BigNumberish],
    [void],
    "nonpayable"
  >;

  claimRefund: TypedContractMethod<
    [marketId: BigNumberish],
    [void],
    "nonpayable"
  >;

  claimWinnings: TypedContractMethod<
    [marketId: BigNumberish],
    [void],
    "nonpayable"
  >;

  commitBet: TypedContractMethod<
    [marketId: BigNumberish, commitHash: BytesLike],
    [void],
    "payable"
  >;

  commitments: TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [
      [string, bigint, bigint, boolean] & {
        commitHash: string;
        amount: bigint;
        timestamp: bigint;
        revealed: boolean;
      }
    ],
    "view"
  >;

  createMarket: TypedContractMethod<
    [
      title: string,
      description: string,
      expiresAt: BigNumberish,
      category: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  emergencyWithdraw: TypedContractMethod<[], [void], "nonpayable">;

  getBet: TypedContractMethod<
    [marketId: BigNumberish, user: AddressLike],
    [PredictionMarket.BetStructOutput],
    "view"
  >;

  getCommitment: TypedContractMethod<
    [marketId: BigNumberish, user: AddressLike],
    [PredictionMarket.CommitmentStructOutput],
    "view"
  >;

  getMarket: TypedContractMethod<
    [marketId: BigNumberish],
    [PredictionMarket.MarketStructOutput],
    "view"
  >;

  getMarketCount: TypedContractMethod<[], [bigint], "view">;

  marketIdCounter: TypedContractMethod<[], [bigint], "view">;

  marketParticipants: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [string],
    "view"
  >;

  markets: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean,
        string
      ] & {
        id: bigint;
        title: string;
        description: string;
        creator: string;
        createdAt: bigint;
        expiresAt: bigint;
        category: bigint;
        totalPool: bigint;
        yesPool: bigint;
        noPool: bigint;
        yesShares: bigint;
        noShares: bigint;
        participants: bigint;
        status: bigint;
        outcome: boolean;
        resolutionReasoning: string;
      }
    ],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  pendingReveals: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  resolveMarket: TypedContractMethod<
    [marketId: BigNumberish, outcome: boolean, reasoning: string],
    [void],
    "nonpayable"
  >;

  resolverAddress: TypedContractMethod<[], [string], "view">;

  revealBet: TypedContractMethod<
    [marketId: BigNumberish, outcome: boolean, salt: BytesLike],
    [void],
    "nonpayable"
  >;

  setResolverAddress: TypedContractMethod<
    [_resolverAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  setVaultAddress: TypedContractMethod<
    [_vaultAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  vaultAddress: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "COMMIT_REVEAL_TIMEOUT"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MAX_BET_AMOUNT"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MIN_BET_AMOUNT"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "PLATFORM_FEE_PERCENT"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "PRICE_PRECISION"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "bets"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [
      [bigint, string, boolean, bigint, bigint, bigint, boolean] & {
        marketId: bigint;
        user: string;
        outcome: boolean;
        shares: bigint;
        amount: bigint;
        revealedAt: bigint;
        claimed: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "calculatePayout"
  ): TypedContractMethod<
    [marketId: BigNumberish, user: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "cancelMarket"
  ): TypedContractMethod<[marketId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "claimRefund"
  ): TypedContractMethod<[marketId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "claimWinnings"
  ): TypedContractMethod<[marketId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "commitBet"
  ): TypedContractMethod<
    [marketId: BigNumberish, commitHash: BytesLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "commitments"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [
      [string, bigint, bigint, boolean] & {
        commitHash: string;
        amount: bigint;
        timestamp: bigint;
        revealed: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "createMarket"
  ): TypedContractMethod<
    [
      title: string,
      description: string,
      expiresAt: BigNumberish,
      category: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "emergencyWithdraw"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getBet"
  ): TypedContractMethod<
    [marketId: BigNumberish, user: AddressLike],
    [PredictionMarket.BetStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getCommitment"
  ): TypedContractMethod<
    [marketId: BigNumberish, user: AddressLike],
    [PredictionMarket.CommitmentStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getMarket"
  ): TypedContractMethod<
    [marketId: BigNumberish],
    [PredictionMarket.MarketStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getMarketCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "marketIdCounter"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "marketParticipants"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "markets"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean,
        string
      ] & {
        id: bigint;
        title: string;
        description: string;
        creator: string;
        createdAt: bigint;
        expiresAt: bigint;
        category: bigint;
        totalPool: bigint;
        yesPool: bigint;
        noPool: bigint;
        yesShares: bigint;
        noShares: bigint;
        participants: bigint;
        status: bigint;
        outcome: boolean;
        resolutionReasoning: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "pendingReveals"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "resolveMarket"
  ): TypedContractMethod<
    [marketId: BigNumberish, outcome: boolean, reasoning: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "resolverAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "revealBet"
  ): TypedContractMethod<
    [marketId: BigNumberish, outcome: boolean, salt: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setResolverAddress"
  ): TypedContractMethod<[_resolverAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setVaultAddress"
  ): TypedContractMethod<[_vaultAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "vaultAddress"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "BetCommitted"
  ): TypedContractEvent<
    BetCommittedEvent.InputTuple,
    BetCommittedEvent.OutputTuple,
    BetCommittedEvent.OutputObject
  >;
  getEvent(
    key: "BetRevealed"
  ): TypedContractEvent<
    BetRevealedEvent.InputTuple,
    BetRevealedEvent.OutputTuple,
    BetRevealedEvent.OutputObject
  >;
  getEvent(
    key: "MarketCancelled"
  ): TypedContractEvent<
    MarketCancelledEvent.InputTuple,
    MarketCancelledEvent.OutputTuple,
    MarketCancelledEvent.OutputObject
  >;
  getEvent(
    key: "MarketCreated"
  ): TypedContractEvent<
    MarketCreatedEvent.InputTuple,
    MarketCreatedEvent.OutputTuple,
    MarketCreatedEvent.OutputObject
  >;
  getEvent(
    key: "MarketResolved"
  ): TypedContractEvent<
    MarketResolvedEvent.InputTuple,
    MarketResolvedEvent.OutputTuple,
    MarketResolvedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;
  getEvent(
    key: "WinningsClaimed"
  ): TypedContractEvent<
    WinningsClaimedEvent.InputTuple,
    WinningsClaimedEvent.OutputTuple,
    WinningsClaimedEvent.OutputObject
  >;

  filters: {
    "BetCommitted(uint256,address,bytes32,uint256)": TypedContractEvent<
      BetCommittedEvent.InputTuple,
      BetCommittedEvent.OutputTuple,
      BetCommittedEvent.OutputObject
    >;
    BetCommitted: TypedContractEvent<
      BetCommittedEvent.InputTuple,
      BetCommittedEvent.OutputTuple,
      BetCommittedEvent.OutputObject
    >;

    "BetRevealed(uint256,address,bool,uint256,uint256)": TypedContractEvent<
      BetRevealedEvent.InputTuple,
      BetRevealedEvent.OutputTuple,
      BetRevealedEvent.OutputObject
    >;
    BetRevealed: TypedContractEvent<
      BetRevealedEvent.InputTuple,
      BetRevealedEvent.OutputTuple,
      BetRevealedEvent.OutputObject
    >;

    "MarketCancelled(uint256)": TypedContractEvent<
      MarketCancelledEvent.InputTuple,
      MarketCancelledEvent.OutputTuple,
      MarketCancelledEvent.OutputObject
    >;
    MarketCancelled: TypedContractEvent<
      MarketCancelledEvent.InputTuple,
      MarketCancelledEvent.OutputTuple,
      MarketCancelledEvent.OutputObject
    >;

    "MarketCreated(uint256,address,string,uint256,uint8)": TypedContractEvent<
      MarketCreatedEvent.InputTuple,
      MarketCreatedEvent.OutputTuple,
      MarketCreatedEvent.OutputObject
    >;
    MarketCreated: TypedContractEvent<
      MarketCreatedEvent.InputTuple,
      MarketCreatedEvent.OutputTuple,
      MarketCreatedEvent.OutputObject
    >;

    "MarketResolved(uint256,bool,string)": TypedContractEvent<
      MarketResolvedEvent.InputTuple,
      MarketResolvedEvent.OutputTuple,
      MarketResolvedEvent.OutputObject
    >;
    MarketResolved: TypedContractEvent<
      MarketResolvedEvent.InputTuple,
      MarketResolvedEvent.OutputTuple,
      MarketResolvedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;

    "WinningsClaimed(uint256,address,uint256)": TypedContractEvent<
      WinningsClaimedEvent.InputTuple,
      WinningsClaimedEvent.OutputTuple,
      WinningsClaimedEvent.OutputObject
    >;
    WinningsClaimed: TypedContractEvent<
      WinningsClaimedEvent.InputTuple,
      WinningsClaimedEvent.OutputTuple,
      WinningsClaimedEvent.OutputObject
    >;
  };
}
